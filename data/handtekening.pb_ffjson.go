// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: handtekening.pb.go

package data

import (
	"bytes"
	"encoding/base64"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"reflect"
)

// MarshalJSON marshal bytes to json - template
func (j *Handtekening) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Handtekening) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(j.Voornaam) != 0 {
		buf.WriteString(`"voornaam":`)
		fflib.WriteJsonString(buf, string(j.Voornaam))
		buf.WriteByte(',')
	}
	if len(j.Tussenvoegsel) != 0 {
		buf.WriteString(`"tussenvoegsel":`)
		fflib.WriteJsonString(buf, string(j.Tussenvoegsel))
		buf.WriteByte(',')
	}
	if len(j.Achternaam) != 0 {
		buf.WriteString(`"achternaam":`)
		fflib.WriteJsonString(buf, string(j.Achternaam))
		buf.WriteByte(',')
	}
	if len(j.Geboortedatum) != 0 {
		buf.WriteString(`"geboortedatum":`)
		fflib.WriteJsonString(buf, string(j.Geboortedatum))
		buf.WriteByte(',')
	}
	if len(j.Geboorteplaats) != 0 {
		buf.WriteString(`"geboorteplaats":`)
		fflib.WriteJsonString(buf, string(j.Geboorteplaats))
		buf.WriteByte(',')
	}
	if len(j.Straat) != 0 {
		buf.WriteString(`"straat":`)
		fflib.WriteJsonString(buf, string(j.Straat))
		buf.WriteByte(',')
	}
	if len(j.Huisnummer) != 0 {
		buf.WriteString(`"huisnummer":`)
		fflib.WriteJsonString(buf, string(j.Huisnummer))
		buf.WriteByte(',')
	}
	if len(j.Postcode) != 0 {
		buf.WriteString(`"postcode":`)
		fflib.WriteJsonString(buf, string(j.Postcode))
		buf.WriteByte(',')
	}
	if len(j.Woonplaats) != 0 {
		buf.WriteString(`"woonplaats":`)
		fflib.WriteJsonString(buf, string(j.Woonplaats))
		buf.WriteByte(',')
	}
	if len(j.Handtekening) != 0 {
		buf.WriteString(`"handtekening":`)
		if j.Handtekening != nil {
			buf.WriteString(`"`)
			{
				enc := base64.NewEncoder(base64.StdEncoding, buf)
				enc.Write(reflect.Indirect(reflect.ValueOf(j.Handtekening)).Bytes())
				enc.Close()
			}
			buf.WriteString(`"`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Email) != 0 {
		buf.WriteString(`"email":`)
		fflib.WriteJsonString(buf, string(j.Email))
		buf.WriteByte(',')
	}
	if len(j.CaptchaResponse) != 0 {
		buf.WriteString(`"captchaResponse":`)
		fflib.WriteJsonString(buf, string(j.CaptchaResponse))
		buf.WriteByte(',')
	}
	if len(j.Host) != 0 {
		buf.WriteString(`"host":`)
		fflib.WriteJsonString(buf, string(j.Host))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtHandtekeningbase = iota
	ffjtHandtekeningnosuchkey

	ffjtHandtekeningVoornaam

	ffjtHandtekeningTussenvoegsel

	ffjtHandtekeningAchternaam

	ffjtHandtekeningGeboortedatum

	ffjtHandtekeningGeboorteplaats

	ffjtHandtekeningStraat

	ffjtHandtekeningHuisnummer

	ffjtHandtekeningPostcode

	ffjtHandtekeningWoonplaats

	ffjtHandtekeningHandtekening

	ffjtHandtekeningEmail

	ffjtHandtekeningCaptchaResponse

	ffjtHandtekeningHost
)

var ffjKeyHandtekeningVoornaam = []byte("voornaam")

var ffjKeyHandtekeningTussenvoegsel = []byte("tussenvoegsel")

var ffjKeyHandtekeningAchternaam = []byte("achternaam")

var ffjKeyHandtekeningGeboortedatum = []byte("geboortedatum")

var ffjKeyHandtekeningGeboorteplaats = []byte("geboorteplaats")

var ffjKeyHandtekeningStraat = []byte("straat")

var ffjKeyHandtekeningHuisnummer = []byte("huisnummer")

var ffjKeyHandtekeningPostcode = []byte("postcode")

var ffjKeyHandtekeningWoonplaats = []byte("woonplaats")

var ffjKeyHandtekeningHandtekening = []byte("handtekening")

var ffjKeyHandtekeningEmail = []byte("email")

var ffjKeyHandtekeningCaptchaResponse = []byte("captchaResponse")

var ffjKeyHandtekeningHost = []byte("host")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Handtekening) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Handtekening) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtHandtekeningbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtHandtekeningnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyHandtekeningAchternaam, kn) {
						currentKey = ffjtHandtekeningAchternaam
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyHandtekeningCaptchaResponse, kn) {
						currentKey = ffjtHandtekeningCaptchaResponse
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyHandtekeningEmail, kn) {
						currentKey = ffjtHandtekeningEmail
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffjKeyHandtekeningGeboortedatum, kn) {
						currentKey = ffjtHandtekeningGeboortedatum
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyHandtekeningGeboorteplaats, kn) {
						currentKey = ffjtHandtekeningGeboorteplaats
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffjKeyHandtekeningHuisnummer, kn) {
						currentKey = ffjtHandtekeningHuisnummer
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyHandtekeningHandtekening, kn) {
						currentKey = ffjtHandtekeningHandtekening
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyHandtekeningHost, kn) {
						currentKey = ffjtHandtekeningHost
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyHandtekeningPostcode, kn) {
						currentKey = ffjtHandtekeningPostcode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyHandtekeningStraat, kn) {
						currentKey = ffjtHandtekeningStraat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyHandtekeningTussenvoegsel, kn) {
						currentKey = ffjtHandtekeningTussenvoegsel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyHandtekeningVoornaam, kn) {
						currentKey = ffjtHandtekeningVoornaam
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyHandtekeningWoonplaats, kn) {
						currentKey = ffjtHandtekeningWoonplaats
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningHost, kn) {
					currentKey = ffjtHandtekeningHost
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningCaptchaResponse, kn) {
					currentKey = ffjtHandtekeningCaptchaResponse
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyHandtekeningEmail, kn) {
					currentKey = ffjtHandtekeningEmail
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningHandtekening, kn) {
					currentKey = ffjtHandtekeningHandtekening
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningWoonplaats, kn) {
					currentKey = ffjtHandtekeningWoonplaats
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningPostcode, kn) {
					currentKey = ffjtHandtekeningPostcode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningHuisnummer, kn) {
					currentKey = ffjtHandtekeningHuisnummer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningStraat, kn) {
					currentKey = ffjtHandtekeningStraat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningGeboorteplaats, kn) {
					currentKey = ffjtHandtekeningGeboorteplaats
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyHandtekeningGeboortedatum, kn) {
					currentKey = ffjtHandtekeningGeboortedatum
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyHandtekeningAchternaam, kn) {
					currentKey = ffjtHandtekeningAchternaam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyHandtekeningTussenvoegsel, kn) {
					currentKey = ffjtHandtekeningTussenvoegsel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyHandtekeningVoornaam, kn) {
					currentKey = ffjtHandtekeningVoornaam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtHandtekeningnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtHandtekeningVoornaam:
					goto handle_Voornaam

				case ffjtHandtekeningTussenvoegsel:
					goto handle_Tussenvoegsel

				case ffjtHandtekeningAchternaam:
					goto handle_Achternaam

				case ffjtHandtekeningGeboortedatum:
					goto handle_Geboortedatum

				case ffjtHandtekeningGeboorteplaats:
					goto handle_Geboorteplaats

				case ffjtHandtekeningStraat:
					goto handle_Straat

				case ffjtHandtekeningHuisnummer:
					goto handle_Huisnummer

				case ffjtHandtekeningPostcode:
					goto handle_Postcode

				case ffjtHandtekeningWoonplaats:
					goto handle_Woonplaats

				case ffjtHandtekeningHandtekening:
					goto handle_Handtekening

				case ffjtHandtekeningEmail:
					goto handle_Email

				case ffjtHandtekeningCaptchaResponse:
					goto handle_CaptchaResponse

				case ffjtHandtekeningHost:
					goto handle_Host

				case ffjtHandtekeningnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Voornaam:

	/* handler: j.Voornaam type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Voornaam = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Tussenvoegsel:

	/* handler: j.Tussenvoegsel type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Tussenvoegsel = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Achternaam:

	/* handler: j.Achternaam type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Achternaam = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Geboortedatum:

	/* handler: j.Geboortedatum type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Geboortedatum = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Geboorteplaats:

	/* handler: j.Geboorteplaats type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Geboorteplaats = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Straat:

	/* handler: j.Straat type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Straat = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Huisnummer:

	/* handler: j.Huisnummer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Huisnummer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Postcode:

	/* handler: j.Postcode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Postcode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Woonplaats:

	/* handler: j.Woonplaats type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Woonplaats = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Handtekening:

	/* handler: j.Handtekening type=[]uint8 kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Handtekening = nil
		} else {
			b := make([]byte, base64.StdEncoding.DecodedLen(fs.Output.Len()))
			n, err := base64.StdEncoding.Decode(b, fs.Output.Bytes())
			if err != nil {
				return fs.WrapErr(err)
			}

			v := reflect.ValueOf(&j.Handtekening).Elem()
			v.SetBytes(b[0:n])

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Email:

	/* handler: j.Email type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Email = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CaptchaResponse:

	/* handler: j.CaptchaResponse type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CaptchaResponse = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Host:

	/* handler: j.Host type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Host = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
