// Code generated by protoc-gen-gogo.
// source: handtekening.proto
// DO NOT EDIT!

/*
	Package data is a generated protocol buffer package.

	It is generated from these files:
		handtekening.proto

	It has these top-level messages:
		Handtekening
*/
package data

import proto "github.com/gogo/protobuf/proto"

import io "io"
import fmt "fmt"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Handtekening struct {
	Voornaam        string `protobuf:"bytes,1,opt,name=voornaam,proto3" json:"voornaam,omitempty"`
	Tussenvoegsel   string `protobuf:"bytes,2,opt,name=tussenvoegsel,proto3" json:"tussenvoegsel,omitempty"`
	Achternaam      string `protobuf:"bytes,3,opt,name=achternaam,proto3" json:"achternaam,omitempty"`
	Geboortedatum   string `protobuf:"bytes,4,opt,name=geboortedatum,proto3" json:"geboortedatum,omitempty"`
	Geboorteplaats  string `protobuf:"bytes,5,opt,name=geboorteplaats,proto3" json:"geboorteplaats,omitempty"`
	Straat          string `protobuf:"bytes,6,opt,name=straat,proto3" json:"straat,omitempty"`
	Huisnummer      string `protobuf:"bytes,7,opt,name=huisnummer,proto3" json:"huisnummer,omitempty"`
	Postcode        string `protobuf:"bytes,8,opt,name=postcode,proto3" json:"postcode,omitempty"`
	Woonplaats      string `protobuf:"bytes,9,opt,name=woonplaats,proto3" json:"woonplaats,omitempty"`
	Handtekening    []byte `protobuf:"bytes,10,opt,name=handtekening,proto3" json:"handtekening,omitempty"`
	CaptchaResponse string `protobuf:"bytes,999,opt,name=captchaResponse,proto3" json:"captchaResponse,omitempty"`
}

func (m *Handtekening) Reset()         { *m = Handtekening{} }
func (m *Handtekening) String() string { return proto.CompactTextString(m) }
func (*Handtekening) ProtoMessage()    {}

func (m *Handtekening) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Handtekening) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Voornaam) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Voornaam)))
		i += copy(data[i:], m.Voornaam)
	}
	if len(m.Tussenvoegsel) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Tussenvoegsel)))
		i += copy(data[i:], m.Tussenvoegsel)
	}
	if len(m.Achternaam) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Achternaam)))
		i += copy(data[i:], m.Achternaam)
	}
	if len(m.Geboortedatum) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Geboortedatum)))
		i += copy(data[i:], m.Geboortedatum)
	}
	if len(m.Geboorteplaats) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Geboorteplaats)))
		i += copy(data[i:], m.Geboorteplaats)
	}
	if len(m.Straat) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Straat)))
		i += copy(data[i:], m.Straat)
	}
	if len(m.Huisnummer) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Huisnummer)))
		i += copy(data[i:], m.Huisnummer)
	}
	if len(m.Postcode) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Postcode)))
		i += copy(data[i:], m.Postcode)
	}
	if len(m.Woonplaats) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.Woonplaats)))
		i += copy(data[i:], m.Woonplaats)
	}
	if m.Handtekening != nil {
		if len(m.Handtekening) > 0 {
			data[i] = 0x52
			i++
			i = encodeVarintHandtekening(data, i, uint64(len(m.Handtekening)))
			i += copy(data[i:], m.Handtekening)
		}
	}
	if len(m.CaptchaResponse) > 0 {
		data[i] = 0xba
		i++
		data[i] = 0x3e
		i++
		i = encodeVarintHandtekening(data, i, uint64(len(m.CaptchaResponse)))
		i += copy(data[i:], m.CaptchaResponse)
	}
	return i, nil
}

func encodeFixed64Handtekening(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Handtekening(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHandtekening(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Handtekening) Size() (n int) {
	var l int
	_ = l
	l = len(m.Voornaam)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Tussenvoegsel)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Achternaam)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Geboortedatum)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Geboorteplaats)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Straat)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Huisnummer)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Postcode)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	l = len(m.Woonplaats)
	if l > 0 {
		n += 1 + l + sovHandtekening(uint64(l))
	}
	if m.Handtekening != nil {
		l = len(m.Handtekening)
		if l > 0 {
			n += 1 + l + sovHandtekening(uint64(l))
		}
	}
	l = len(m.CaptchaResponse)
	if l > 0 {
		n += 2 + l + sovHandtekening(uint64(l))
	}
	return n
}

func sovHandtekening(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHandtekening(x uint64) (n int) {
	return sovHandtekening(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Handtekening) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voornaam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voornaam = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tussenvoegsel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tussenvoegsel = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achternaam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achternaam = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geboortedatum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Geboortedatum = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geboorteplaats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Geboorteplaats = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Straat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Straat = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Huisnummer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Huisnummer = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postcode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Woonplaats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Woonplaats = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handtekening", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandtekening
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handtekening = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaResponse = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipHandtekening(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandtekening
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func skipHandtekening(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHandtekening
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHandtekening(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHandtekening = fmt.Errorf("proto: negative length found during unmarshaling")
)
